// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model service {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdBy   String?
  price       price[]
  commission  commission[]
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?    @updatedAt
}

model price {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  serviceId   String    @db.ObjectId
  price       Int
  appliedDate DateTime?
  expiredDate DateTime?
  service     service   @relation(fields: [serviceId], references: [id])
}

model commission {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  type        String
  value       Float
  appliedDate DateTime?
  expiredDate DateTime?
  service     service?  @relation(fields: [serviceId], references: [id])
  serviceId   String?   @db.ObjectId
}

model commissionTarget {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  commissionId String
  target       Int
  value        Int
  period       String
}

model serviceCommission {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  serviceId    String
  commissionId String
}

model staff {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  phone       String?
  address     String?
  dateOfBirth DateTime?
  sex         Boolean?
  type        String    @default("staff")
  branchId    String    @db.ObjectId
  branch      branch?   @relation(fields: [branchId], references: [id])
  accountId   String    @db.ObjectId
  account     account   @relation(fields: [accountId], references: [id])
}

model branch {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  status      Boolean      @default(true)
  createdDate DateTime?    @default(now())
  createdBy   String?
  updatedDate DateTime?    @updatedAt
  updatedBy   String?
  staff       staff[]
  department  department[]
}

model department {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  status      Boolean   @default(true)
  createdDate DateTime? @default(now())
  createdBy   String?
  updatedDate DateTime? @updatedAt
  updatedBy   String?
  branchId    String    @db.ObjectId
  branch      branch    @relation(fields: [branchId], references: [id])
}

model level {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  exp  Int
  rate Float?
}

model transaction {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  serviceId       String
  transactionDate DateTime?
  createdAt       DateTime? @default(now())
  createdBy       String?
  status          String? // like: "created, accepted, completed "
  accountId       String    @db.ObjectId
  account         account   @relation(fields: [accountId], references: [id])
  moneyEarned     Int       @default(0)
}

model account {
  id                  String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime?      @default(now())
  updatedAt           DateTime?      @updatedAt
  email               String         @unique
  password            String
  role                String?
  levelId             String?
  exp                 Int            @default(0)
  staff               staff[]
  dailyLoginCount     Int?           @default(0)
  deviceInfo          String?
  description         String?
  lastLoginDate       DateTime?
  lastPasswordChanged DateTime?
  status              Boolean        @default(true)
  transaction         transaction[]
  groupUsers          groupAccount[]
}

model group {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  status      Boolean        @default(true)
  description String?
  createdAt   DateTime?      @default(now())
  createdBy   String?
  updatedAt   DateTime?      @updatedAt
  updatedBy   String?
  groupUsers  groupAccount[]
  groupRole   groupRole[]
}

model groupAccount {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  groupId     String    @db.ObjectId
  group       group     @relation(fields: [groupId], references: [id])
  account     account   @relation(fields: [accountId], references: [id])
  accountId   String    @db.ObjectId
  status      Boolean   @default(true)
  description String?
  createdAt   DateTime? @default(now())
  createdBy   String?
  updatedAt   DateTime? @updatedAt
  updatedBy   String?
}

model role {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  type           Int
  value          String?
  rolePermission rolePermission[]
  status         Boolean          @default(true)
  description    String?
  createdAt      DateTime?        @default(now())
  createdBy      String?
  updatedAt      DateTime?        @updatedAt
  updatedBy      String?
  groupId        String?          @db.ObjectId
  groupRole      groupRole[]
}

model groupRole {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  groupId     String    @db.ObjectId
  group       group     @relation(fields: [groupId], references: [id])
  roleId      String    @db.ObjectId
  role        role      @relation(fields: [roleId], references: [id])
  status      Boolean   @default(true)
  description String?
  createdAt   DateTime? @default(now())
  createdBy   String?
  updatedAt   DateTime? @updatedAt
  updatedBy   String?
}

model permission {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  action         String
  resource       String
  fields         String
  conditions     Json
  inverted       Boolean
  system         Boolean
  rolePermission rolePermission[]
  status         Boolean          @default(true)
  description    String?
  createdAt      DateTime?        @default(now())
  createdBy      String?
  updatedAt      DateTime?        @updatedAt
  updatedBy      String?
}

model rolePermission {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  roleId       String     @db.ObjectId
  role         role       @relation(fields: [roleId], references: [id])
  permissionId String     @db.ObjectId
  permission   permission @relation(fields: [permissionId], references: [id])
  status       Boolean    @default(true)
  description  String?
  createdAt    DateTime?  @default(now())
  createdBy    String?
  updatedAt    DateTime?  @updatedAt
  updatedBy    String?
}
